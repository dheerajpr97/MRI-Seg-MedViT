name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-docker-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        id: build-image
        env:
          IMAGE_TAG: latest
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mrivitapp:$IMAGE_TAG .
          docker push ${{ secrets.DOCKER_USERNAME }}/mrivitapp:$IMAGE_TAG
          echo "::set-output name=image::${{ secrets.DOCKER_USERNAME }}/mrivitapp:$IMAGE_TAG"
          
  Continuous-Deployment:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull latest images
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/mrivitapp:latest

      - name: Run Docker Image to serve users
        run: docker run -d -p 8080:8080 --name=medvitsegapp ${{ secrets.DOCKER_USERNAME }}/mrivitapp:latest

      - name: Clean previous images and containers
        run: docker system prune -f
